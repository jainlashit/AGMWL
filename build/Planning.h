// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Planning.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef ____Planning_h__
#define ____Planning_h__

#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/Direct.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace RoboCompPlanning
{

class PlanReceiver;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::RoboCompPlanning::PlanReceiver>&);
::IceProxy::Ice::Object* upCast(::IceProxy::RoboCompPlanning::PlanReceiver*);

class Planning;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::RoboCompPlanning::Planning>&);
::IceProxy::Ice::Object* upCast(::IceProxy::RoboCompPlanning::Planning*);

class PeleaAgent;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::RoboCompPlanning::PeleaAgent>&);
::IceProxy::Ice::Object* upCast(::IceProxy::RoboCompPlanning::PeleaAgent*);

}

}

namespace RoboCompPlanning
{

class PlanReceiver;
bool operator==(const PlanReceiver&, const PlanReceiver&);
bool operator<(const PlanReceiver&, const PlanReceiver&);
::Ice::Object* upCast(::RoboCompPlanning::PlanReceiver*);
typedef ::IceInternal::Handle< ::RoboCompPlanning::PlanReceiver> PlanReceiverPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::RoboCompPlanning::PlanReceiver> PlanReceiverPrx;
void __patch(PlanReceiverPtr&, const ::Ice::ObjectPtr&);

class Planning;
bool operator==(const Planning&, const Planning&);
bool operator<(const Planning&, const Planning&);
::Ice::Object* upCast(::RoboCompPlanning::Planning*);
typedef ::IceInternal::Handle< ::RoboCompPlanning::Planning> PlanningPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::RoboCompPlanning::Planning> PlanningPrx;
void __patch(PlanningPtr&, const ::Ice::ObjectPtr&);

class PeleaAgent;
bool operator==(const PeleaAgent&, const PeleaAgent&);
bool operator<(const PeleaAgent&, const PeleaAgent&);
::Ice::Object* upCast(::RoboCompPlanning::PeleaAgent*);
typedef ::IceInternal::Handle< ::RoboCompPlanning::PeleaAgent> PeleaAgentPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::RoboCompPlanning::PeleaAgent> PeleaAgentPrx;
void __patch(PeleaAgentPtr&, const ::Ice::ObjectPtr&);

}

namespace RoboCompPlanning
{

class ServerException : public ::Ice::UserException
{
public:

    ServerException() {}
    explicit ServerException(const ::std::string&);
    virtual ~ServerException() throw();

    virtual ::std::string ice_name() const;
    virtual ServerException* ice_clone() const;
    virtual void ice_throw() const;

    ::std::string what;

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::UserException::__writeImpl;
    using ::Ice::UserException::__readImpl;
    #endif
};

static ServerException __ServerException_init;

typedef ::std::vector< ::std::string> StringVector;

typedef ::std::map< ::std::string, ::std::string> StringDictionary;

struct Action
{
    ::RoboCompPlanning::StringVector symbols;
    ::std::string name;
};

typedef ::std::vector< ::RoboCompPlanning::Action> ActionSequence;

struct Plan
{
    ::RoboCompPlanning::ActionSequence actions;
    ::Ice::Float cost;
};

}

namespace Ice
{
template<>
struct StreamableTraits< ::RoboCompPlanning::ServerException>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<>
struct StreamableTraits< ::RoboCompPlanning::Action>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 2;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::RoboCompPlanning::Action, S>
{
    static void write(S* __os, const ::RoboCompPlanning::Action& v)
    {
        __os->write(v.symbols);
        __os->write(v.name);
    }
};

template<class S>
struct StreamReader< ::RoboCompPlanning::Action, S>
{
    static void read(S* __is, ::RoboCompPlanning::Action& v)
    {
        __is->read(v.symbols);
        __is->read(v.name);
    }
};

template<>
struct StreamableTraits< ::RoboCompPlanning::Plan>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 5;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::RoboCompPlanning::Plan, S>
{
    static void write(S* __os, const ::RoboCompPlanning::Plan& v)
    {
        __os->write(v.actions);
        __os->write(v.cost);
    }
};

template<class S>
struct StreamReader< ::RoboCompPlanning::Plan, S>
{
    static void read(S* __is, ::RoboCompPlanning::Plan& v)
    {
        __is->read(v.actions);
        __is->read(v.cost);
    }
};

}

namespace RoboCompPlanning
{

class Callback_PlanReceiver_setPlan_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_PlanReceiver_setPlan_Base> Callback_PlanReceiver_setPlanPtr;

class Callback_Planning_getSolution_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Planning_getSolution_Base> Callback_Planning_getSolutionPtr;

class Callback_Planning_getNextAction_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Planning_getNextAction_Base> Callback_Planning_getNextActionPtr;

class Callback_PeleaAgent_stateChanged_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_PeleaAgent_stateChanged_Base> Callback_PeleaAgent_stateChangedPtr;

}

namespace IceProxy
{

namespace RoboCompPlanning
{

class PlanReceiver : virtual public ::IceProxy::Ice::Object
{
public:

    void setPlan(const ::RoboCompPlanning::Plan& p)
    {
        setPlan(p, 0);
    }
    void setPlan(const ::RoboCompPlanning::Plan& p, const ::Ice::Context& __ctx)
    {
        setPlan(p, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setPlan(const ::RoboCompPlanning::Plan& p, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setPlan(p, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setPlan(const ::RoboCompPlanning::Plan& p, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setPlan(p, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setPlan(const ::RoboCompPlanning::Plan& p, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setPlan(p, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setPlan(const ::RoboCompPlanning::Plan& p, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setPlan(p, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setPlan(const ::RoboCompPlanning::Plan& p)
    {
        return begin_setPlan(p, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setPlan(const ::RoboCompPlanning::Plan& p, const ::Ice::Context& __ctx)
    {
        return begin_setPlan(p, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setPlan(const ::RoboCompPlanning::Plan& p, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPlan(p, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setPlan(const ::RoboCompPlanning::Plan& p, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPlan(p, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setPlan(const ::RoboCompPlanning::Plan& p, const ::RoboCompPlanning::Callback_PlanReceiver_setPlanPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPlan(p, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setPlan(const ::RoboCompPlanning::Plan& p, const ::Ice::Context& __ctx, const ::RoboCompPlanning::Callback_PlanReceiver_setPlanPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPlan(p, &__ctx, __del, __cookie);
    }

    void end_setPlan(const ::Ice::AsyncResultPtr&);
    
private:

    void setPlan(const ::RoboCompPlanning::Plan&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setPlan(const ::RoboCompPlanning::Plan&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<PlanReceiver> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<PlanReceiver*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<PlanReceiver> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<PlanReceiver*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<PlanReceiver> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<PlanReceiver*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<PlanReceiver> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<PlanReceiver*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<PlanReceiver> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<PlanReceiver*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<PlanReceiver> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<PlanReceiver*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<PlanReceiver> ice_secure(bool __secure) const
    {
        return dynamic_cast<PlanReceiver*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<PlanReceiver> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<PlanReceiver*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<PlanReceiver> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<PlanReceiver*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<PlanReceiver> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<PlanReceiver*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<PlanReceiver> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<PlanReceiver*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<PlanReceiver> ice_twoway() const
    {
        return dynamic_cast<PlanReceiver*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<PlanReceiver> ice_oneway() const
    {
        return dynamic_cast<PlanReceiver*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<PlanReceiver> ice_batchOneway() const
    {
        return dynamic_cast<PlanReceiver*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<PlanReceiver> ice_datagram() const
    {
        return dynamic_cast<PlanReceiver*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<PlanReceiver> ice_batchDatagram() const
    {
        return dynamic_cast<PlanReceiver*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<PlanReceiver> ice_compress(bool __compress) const
    {
        return dynamic_cast<PlanReceiver*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<PlanReceiver> ice_timeout(int __timeout) const
    {
        return dynamic_cast<PlanReceiver*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<PlanReceiver> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<PlanReceiver*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<PlanReceiver> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<PlanReceiver*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class Planning : virtual public ::IceProxy::Ice::Object
{
public:

    bool getSolution(const ::std::string& Domain, const ::std::string& Problem, ::RoboCompPlanning::Plan& solution)
    {
        return getSolution(Domain, Problem, solution, 0);
    }
    bool getSolution(const ::std::string& Domain, const ::std::string& Problem, ::RoboCompPlanning::Plan& solution, const ::Ice::Context& __ctx)
    {
        return getSolution(Domain, Problem, solution, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getSolution(const ::std::string& Domain, const ::std::string& Problem, const ::IceInternal::Function<void (bool, const ::RoboCompPlanning::Plan&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getSolution(Domain, Problem, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getSolution(const ::std::string& Domain, const ::std::string& Problem, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getSolution(Domain, Problem, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getSolution(const ::std::string& Domain, const ::std::string& Problem, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (bool, const ::RoboCompPlanning::Plan&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getSolution(Domain, Problem, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getSolution(const ::std::string& Domain, const ::std::string& Problem, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getSolution(Domain, Problem, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getSolution(const ::std::string& Domain, const ::std::string& Problem, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (bool, const ::RoboCompPlanning::Plan&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (bool, const ::RoboCompPlanning::Plan&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::RoboCompPlanning::PlanningPrx __proxy = ::RoboCompPlanning::PlanningPrx::uncheckedCast(__result->getProxy());
                ::RoboCompPlanning::Plan solution;
                bool __ret;
                try
                {
                    __ret = __proxy->end_getSolution(solution, __result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret, solution);
                }
            }
        
        private:
            
            ::std::function<void (bool, const ::RoboCompPlanning::Plan&)> _response;
        };
        return begin_getSolution(Domain, Problem, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getSolution(const ::std::string& Domain, const ::std::string& Problem)
    {
        return begin_getSolution(Domain, Problem, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getSolution(const ::std::string& Domain, const ::std::string& Problem, const ::Ice::Context& __ctx)
    {
        return begin_getSolution(Domain, Problem, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getSolution(const ::std::string& Domain, const ::std::string& Problem, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getSolution(Domain, Problem, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getSolution(const ::std::string& Domain, const ::std::string& Problem, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getSolution(Domain, Problem, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getSolution(const ::std::string& Domain, const ::std::string& Problem, const ::RoboCompPlanning::Callback_Planning_getSolutionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getSolution(Domain, Problem, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getSolution(const ::std::string& Domain, const ::std::string& Problem, const ::Ice::Context& __ctx, const ::RoboCompPlanning::Callback_Planning_getSolutionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getSolution(Domain, Problem, &__ctx, __del, __cookie);
    }

    bool end_getSolution(::RoboCompPlanning::Plan& solution, const ::Ice::AsyncResultPtr&);
    
private:

    bool getSolution(const ::std::string&, const ::std::string&, ::RoboCompPlanning::Plan&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getSolution(const ::std::string&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool getNextAction(const ::std::string& Problem, ::RoboCompPlanning::Plan& solution)
    {
        return getNextAction(Problem, solution, 0);
    }
    bool getNextAction(const ::std::string& Problem, ::RoboCompPlanning::Plan& solution, const ::Ice::Context& __ctx)
    {
        return getNextAction(Problem, solution, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getNextAction(const ::std::string& Problem, const ::IceInternal::Function<void (bool, const ::RoboCompPlanning::Plan&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getNextAction(Problem, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getNextAction(const ::std::string& Problem, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getNextAction(Problem, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getNextAction(const ::std::string& Problem, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (bool, const ::RoboCompPlanning::Plan&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getNextAction(Problem, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getNextAction(const ::std::string& Problem, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getNextAction(Problem, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getNextAction(const ::std::string& Problem, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (bool, const ::RoboCompPlanning::Plan&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (bool, const ::RoboCompPlanning::Plan&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::RoboCompPlanning::PlanningPrx __proxy = ::RoboCompPlanning::PlanningPrx::uncheckedCast(__result->getProxy());
                ::RoboCompPlanning::Plan solution;
                bool __ret;
                try
                {
                    __ret = __proxy->end_getNextAction(solution, __result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret, solution);
                }
            }
        
        private:
            
            ::std::function<void (bool, const ::RoboCompPlanning::Plan&)> _response;
        };
        return begin_getNextAction(Problem, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getNextAction(const ::std::string& Problem)
    {
        return begin_getNextAction(Problem, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getNextAction(const ::std::string& Problem, const ::Ice::Context& __ctx)
    {
        return begin_getNextAction(Problem, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getNextAction(const ::std::string& Problem, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getNextAction(Problem, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getNextAction(const ::std::string& Problem, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getNextAction(Problem, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getNextAction(const ::std::string& Problem, const ::RoboCompPlanning::Callback_Planning_getNextActionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getNextAction(Problem, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getNextAction(const ::std::string& Problem, const ::Ice::Context& __ctx, const ::RoboCompPlanning::Callback_Planning_getNextActionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getNextAction(Problem, &__ctx, __del, __cookie);
    }

    bool end_getNextAction(::RoboCompPlanning::Plan& solution, const ::Ice::AsyncResultPtr&);
    
private:

    bool getNextAction(const ::std::string&, ::RoboCompPlanning::Plan&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getNextAction(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<Planning> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<Planning*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<Planning> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<Planning*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Planning> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<Planning*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<Planning> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<Planning*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Planning> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<Planning*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<Planning> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<Planning*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<Planning> ice_secure(bool __secure) const
    {
        return dynamic_cast<Planning*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<Planning> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<Planning*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<Planning> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<Planning*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<Planning> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<Planning*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<Planning> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<Planning*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<Planning> ice_twoway() const
    {
        return dynamic_cast<Planning*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<Planning> ice_oneway() const
    {
        return dynamic_cast<Planning*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<Planning> ice_batchOneway() const
    {
        return dynamic_cast<Planning*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<Planning> ice_datagram() const
    {
        return dynamic_cast<Planning*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<Planning> ice_batchDatagram() const
    {
        return dynamic_cast<Planning*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<Planning> ice_compress(bool __compress) const
    {
        return dynamic_cast<Planning*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<Planning> ice_timeout(int __timeout) const
    {
        return dynamic_cast<Planning*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Planning> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<Planning*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Planning> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<Planning*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class PeleaAgent : virtual public ::IceProxy::Ice::Object
{
public:

    void stateChanged(const ::RoboCompPlanning::StringDictionary& state)
    {
        stateChanged(state, 0);
    }
    void stateChanged(const ::RoboCompPlanning::StringDictionary& state, const ::Ice::Context& __ctx)
    {
        stateChanged(state, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_stateChanged(const ::RoboCompPlanning::StringDictionary& state, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_stateChanged(state, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_stateChanged(const ::RoboCompPlanning::StringDictionary& state, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_stateChanged(state, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_stateChanged(const ::RoboCompPlanning::StringDictionary& state, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_stateChanged(state, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_stateChanged(const ::RoboCompPlanning::StringDictionary& state, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_stateChanged(state, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_stateChanged(const ::RoboCompPlanning::StringDictionary& state)
    {
        return begin_stateChanged(state, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_stateChanged(const ::RoboCompPlanning::StringDictionary& state, const ::Ice::Context& __ctx)
    {
        return begin_stateChanged(state, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_stateChanged(const ::RoboCompPlanning::StringDictionary& state, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_stateChanged(state, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_stateChanged(const ::RoboCompPlanning::StringDictionary& state, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_stateChanged(state, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_stateChanged(const ::RoboCompPlanning::StringDictionary& state, const ::RoboCompPlanning::Callback_PeleaAgent_stateChangedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_stateChanged(state, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_stateChanged(const ::RoboCompPlanning::StringDictionary& state, const ::Ice::Context& __ctx, const ::RoboCompPlanning::Callback_PeleaAgent_stateChangedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_stateChanged(state, &__ctx, __del, __cookie);
    }

    void end_stateChanged(const ::Ice::AsyncResultPtr&);
    
private:

    void stateChanged(const ::RoboCompPlanning::StringDictionary&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_stateChanged(const ::RoboCompPlanning::StringDictionary&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<PeleaAgent> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<PeleaAgent*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<PeleaAgent> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<PeleaAgent*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<PeleaAgent> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<PeleaAgent*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<PeleaAgent> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<PeleaAgent*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<PeleaAgent> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<PeleaAgent*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<PeleaAgent> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<PeleaAgent*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<PeleaAgent> ice_secure(bool __secure) const
    {
        return dynamic_cast<PeleaAgent*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<PeleaAgent> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<PeleaAgent*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<PeleaAgent> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<PeleaAgent*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<PeleaAgent> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<PeleaAgent*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<PeleaAgent> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<PeleaAgent*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<PeleaAgent> ice_twoway() const
    {
        return dynamic_cast<PeleaAgent*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<PeleaAgent> ice_oneway() const
    {
        return dynamic_cast<PeleaAgent*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<PeleaAgent> ice_batchOneway() const
    {
        return dynamic_cast<PeleaAgent*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<PeleaAgent> ice_datagram() const
    {
        return dynamic_cast<PeleaAgent*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<PeleaAgent> ice_batchDatagram() const
    {
        return dynamic_cast<PeleaAgent*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<PeleaAgent> ice_compress(bool __compress) const
    {
        return dynamic_cast<PeleaAgent*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<PeleaAgent> ice_timeout(int __timeout) const
    {
        return dynamic_cast<PeleaAgent*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<PeleaAgent> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<PeleaAgent*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<PeleaAgent> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<PeleaAgent*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace IceDelegate
{

namespace RoboCompPlanning
{

class PlanReceiver : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual void setPlan(const ::RoboCompPlanning::Plan&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

class Planning : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual bool getSolution(const ::std::string&, const ::std::string&, ::RoboCompPlanning::Plan&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual bool getNextAction(const ::std::string&, ::RoboCompPlanning::Plan&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

class PeleaAgent : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual void stateChanged(const ::RoboCompPlanning::StringDictionary&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

}

}

namespace IceDelegateM
{

namespace RoboCompPlanning
{

class PlanReceiver : virtual public ::IceDelegate::RoboCompPlanning::PlanReceiver,
                     virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual void setPlan(const ::RoboCompPlanning::Plan&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class Planning : virtual public ::IceDelegate::RoboCompPlanning::Planning,
                 virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual bool getSolution(const ::std::string&, const ::std::string&, ::RoboCompPlanning::Plan&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual bool getNextAction(const ::std::string&, ::RoboCompPlanning::Plan&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class PeleaAgent : virtual public ::IceDelegate::RoboCompPlanning::PeleaAgent,
                   virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual void stateChanged(const ::RoboCompPlanning::StringDictionary&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

namespace IceDelegateD
{

namespace RoboCompPlanning
{

class PlanReceiver : virtual public ::IceDelegate::RoboCompPlanning::PlanReceiver,
                     virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual void setPlan(const ::RoboCompPlanning::Plan&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class Planning : virtual public ::IceDelegate::RoboCompPlanning::Planning,
                 virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual bool getSolution(const ::std::string&, const ::std::string&, ::RoboCompPlanning::Plan&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual bool getNextAction(const ::std::string&, ::RoboCompPlanning::Plan&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class PeleaAgent : virtual public ::IceDelegate::RoboCompPlanning::PeleaAgent,
                   virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual void stateChanged(const ::RoboCompPlanning::StringDictionary&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

namespace RoboCompPlanning
{

class PlanReceiver : virtual public ::Ice::Object
{
public:

    typedef PlanReceiverPrx ProxyType;
    typedef PlanReceiverPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void setPlan(const ::RoboCompPlanning::Plan&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setPlan(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const PlanReceiver& l, const PlanReceiver& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const PlanReceiver& l, const PlanReceiver& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class Planning : virtual public ::Ice::Object
{
public:

    typedef PlanningPrx ProxyType;
    typedef PlanningPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual bool getSolution(const ::std::string&, const ::std::string&, ::RoboCompPlanning::Plan&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getSolution(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool getNextAction(const ::std::string&, ::RoboCompPlanning::Plan&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getNextAction(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const Planning& l, const Planning& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const Planning& l, const Planning& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class PeleaAgent : virtual public ::Ice::Object
{
public:

    typedef PeleaAgentPrx ProxyType;
    typedef PeleaAgentPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void stateChanged(const ::RoboCompPlanning::StringDictionary&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___stateChanged(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const PeleaAgent& l, const PeleaAgent& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const PeleaAgent& l, const PeleaAgent& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace RoboCompPlanning
{

template<class T>
class CallbackNC_PlanReceiver_setPlan : public Callback_PlanReceiver_setPlan_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_PlanReceiver_setPlan(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_PlanReceiver_setPlanPtr
newCallback_PlanReceiver_setPlan(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlanReceiver_setPlan<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PlanReceiver_setPlanPtr
newCallback_PlanReceiver_setPlan(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlanReceiver_setPlan<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_PlanReceiver_setPlanPtr
newCallback_PlanReceiver_setPlan(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlanReceiver_setPlan<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PlanReceiver_setPlanPtr
newCallback_PlanReceiver_setPlan(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlanReceiver_setPlan<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_PlanReceiver_setPlan : public Callback_PlanReceiver_setPlan_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_PlanReceiver_setPlan(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_PlanReceiver_setPlanPtr
newCallback_PlanReceiver_setPlan(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlanReceiver_setPlan<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PlanReceiver_setPlanPtr
newCallback_PlanReceiver_setPlan(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlanReceiver_setPlan<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_PlanReceiver_setPlanPtr
newCallback_PlanReceiver_setPlan(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlanReceiver_setPlan<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PlanReceiver_setPlanPtr
newCallback_PlanReceiver_setPlan(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlanReceiver_setPlan<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Planning_getSolution : public Callback_Planning_getSolution_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool, const ::RoboCompPlanning::Plan&);

    CallbackNC_Planning_getSolution(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompPlanning::PlanningPrx __proxy = ::RoboCompPlanning::PlanningPrx::uncheckedCast(__result->getProxy());
        ::RoboCompPlanning::Plan solution;
        bool __ret;
        try
        {
            __ret = __proxy->end_getSolution(solution, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret, solution);
        }
    }

    Response response;
};

template<class T> Callback_Planning_getSolutionPtr
newCallback_Planning_getSolution(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const ::RoboCompPlanning::Plan&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Planning_getSolution<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Planning_getSolutionPtr
newCallback_Planning_getSolution(T* instance, void (T::*cb)(bool, const ::RoboCompPlanning::Plan&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Planning_getSolution<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Planning_getSolution : public Callback_Planning_getSolution_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const ::RoboCompPlanning::Plan&, const CT&);

    Callback_Planning_getSolution(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompPlanning::PlanningPrx __proxy = ::RoboCompPlanning::PlanningPrx::uncheckedCast(__result->getProxy());
        ::RoboCompPlanning::Plan solution;
        bool __ret;
        try
        {
            __ret = __proxy->end_getSolution(solution, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, solution, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Planning_getSolutionPtr
newCallback_Planning_getSolution(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const ::RoboCompPlanning::Plan&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Planning_getSolution<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Planning_getSolutionPtr
newCallback_Planning_getSolution(T* instance, void (T::*cb)(bool, const ::RoboCompPlanning::Plan&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Planning_getSolution<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Planning_getNextAction : public Callback_Planning_getNextAction_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool, const ::RoboCompPlanning::Plan&);

    CallbackNC_Planning_getNextAction(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompPlanning::PlanningPrx __proxy = ::RoboCompPlanning::PlanningPrx::uncheckedCast(__result->getProxy());
        ::RoboCompPlanning::Plan solution;
        bool __ret;
        try
        {
            __ret = __proxy->end_getNextAction(solution, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret, solution);
        }
    }

    Response response;
};

template<class T> Callback_Planning_getNextActionPtr
newCallback_Planning_getNextAction(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const ::RoboCompPlanning::Plan&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Planning_getNextAction<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Planning_getNextActionPtr
newCallback_Planning_getNextAction(T* instance, void (T::*cb)(bool, const ::RoboCompPlanning::Plan&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Planning_getNextAction<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Planning_getNextAction : public Callback_Planning_getNextAction_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const ::RoboCompPlanning::Plan&, const CT&);

    Callback_Planning_getNextAction(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompPlanning::PlanningPrx __proxy = ::RoboCompPlanning::PlanningPrx::uncheckedCast(__result->getProxy());
        ::RoboCompPlanning::Plan solution;
        bool __ret;
        try
        {
            __ret = __proxy->end_getNextAction(solution, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, solution, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Planning_getNextActionPtr
newCallback_Planning_getNextAction(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const ::RoboCompPlanning::Plan&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Planning_getNextAction<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Planning_getNextActionPtr
newCallback_Planning_getNextAction(T* instance, void (T::*cb)(bool, const ::RoboCompPlanning::Plan&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Planning_getNextAction<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_PeleaAgent_stateChanged : public Callback_PeleaAgent_stateChanged_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_PeleaAgent_stateChanged(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_PeleaAgent_stateChangedPtr
newCallback_PeleaAgent_stateChanged(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PeleaAgent_stateChanged<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PeleaAgent_stateChangedPtr
newCallback_PeleaAgent_stateChanged(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PeleaAgent_stateChanged<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_PeleaAgent_stateChangedPtr
newCallback_PeleaAgent_stateChanged(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PeleaAgent_stateChanged<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PeleaAgent_stateChangedPtr
newCallback_PeleaAgent_stateChanged(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PeleaAgent_stateChanged<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_PeleaAgent_stateChanged : public Callback_PeleaAgent_stateChanged_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_PeleaAgent_stateChanged(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_PeleaAgent_stateChangedPtr
newCallback_PeleaAgent_stateChanged(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PeleaAgent_stateChanged<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PeleaAgent_stateChangedPtr
newCallback_PeleaAgent_stateChanged(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PeleaAgent_stateChanged<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_PeleaAgent_stateChangedPtr
newCallback_PeleaAgent_stateChanged(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PeleaAgent_stateChanged<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PeleaAgent_stateChangedPtr
newCallback_PeleaAgent_stateChanged(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PeleaAgent_stateChanged<T, CT>(instance, 0, excb, sentcb);
}

}

#endif
